import { jsx as _jsx } from "react/jsx-runtime";
// Do not manually update this file, changes will be autogenerated by our scripts based on: ui-extensions-remote-renderer/static/js/utils/remote-component-registry.tsx
import { createRemoteReactComponent } from '@remote-ui/react';
export const createRemoteComponentRegistry = () => {
    const componentMetadataLookup = new Map();
    const componentNameByComponentMap = new Map();
    const registerComponent = (component, componentName, fragmentProps) => {
        componentNameByComponentMap.set(component, componentName);
        componentMetadataLookup.set(componentName, {
            fragmentPropsSet: new Set(fragmentProps),
            fragmentPropsArray: fragmentProps,
        });
        return component;
    };
    return {
        getComponentName: (component) => {
            const componentName = componentNameByComponentMap.get(component);
            if (!componentName) {
                return null;
            }
            return componentName;
        },
        isAllowedComponentName: (componentName) => {
            return componentMetadataLookup.has(componentName);
        },
        isComponentFragmentProp: (componentName, propName) => {
            const componentMetadata = componentMetadataLookup.get(componentName);
            if (!componentMetadata) {
                return false;
            }
            return componentMetadata.fragmentPropsSet.has(propName);
        },
        getComponentFragmentPropNames: (componentName) => {
            const componentMetadata = componentMetadataLookup.get(componentName);
            if (!componentMetadata) {
                return [];
            }
            const { fragmentPropsArray } = componentMetadata;
            return fragmentPropsArray;
        },
        createAndRegisterRemoteReactComponent: (componentName, options = {}) => {
            const { fragmentProps = [] } = options;
            const remoteReactComponent = createRemoteReactComponent(componentName, {
                fragmentProps: fragmentProps,
            });
            return registerComponent(remoteReactComponent, componentName, fragmentProps);
        },
        createAndRegisterRemoteCompoundReactComponent: (componentName, options) => {
            const { fragmentProps = [] } = options;
            const RemoteComponentType = createRemoteReactComponent(componentName, {
                fragmentProps,
            });
            // We can only attach properties to a function component type, so we need to check if the remote component type is a function.
            // If the remote component type is not a function, we need to wrap it in a function component.
            const CompoundFunctionComponentType = typeof RemoteComponentType === 'function'
                ? RemoteComponentType
                : (props) => (_jsx(RemoteComponentType, { ...props }));
            // Attach the compound component properties to the function component that we will be returning.
            Object.assign(CompoundFunctionComponentType, options.compoundComponentProperties);
            // Register the compound function component with the registry and return it.
            return registerComponent(CompoundFunctionComponentType, componentName, fragmentProps);
        },
    };
};
