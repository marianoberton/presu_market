import type { ExtensionPoints } from './extension-points.synced';
export interface HubSpotFetchOptions {
    method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
    timeout?: number;
    body?: {
        [key: string]: unknown;
    };
    headers?: Headers | Record<string, string>;
}
export type HubSpotFetchRequestURI = string | URL;
export type ProxyMetadata = {
    userEmail?: string;
    userId?: number;
    portalId?: number;
};
/**
 * @category Serverless
 */
export interface ServerlessRunnerParams {
    /**
     * Name of the serverless function
     */
    name: string;
    /**
     * Names of CRM object properties to be retrieved and supplied to the function as `context.propertiesToSend`
     */
    propertiesToSend?: string[];
    /**
     * Additional parameters to be supplied to the function as `context.parameters`
     */
    parameters?: JsonValue;
    /**
     * @deprecated Optional payload supplied to the function as `context.event.payload`.
     * Support for this param may be removed in the future. Use `parameters` instead.
     */
    payload?: JsonValue;
}
/**
 * @category Serverless
 */
export declare enum ServerlessExecutionStatus {
    Success = "SUCCESS",
    Error = "ERROR"
}
/**
 * @category Serverless
 */
export type ServerlessExecutionResult = {
    status: ServerlessExecutionStatus.Success;
    response: JsonValue;
} | {
    status: ServerlessExecutionStatus.Error;
    message: string;
};
/**
 * @category Serverless
 */
export type ServerlessFuncRunner = (params: ServerlessRunnerParams) => Promise<ServerlessExecutionResult>;
/**
 *  @ignore
 *  @category Serverless
 */
export interface ServerlessExecutionRequest {
    appId: number;
    extensibleCardId: number;
    serverlessFunction: string;
    location: keyof ExtensionPoints;
    objectQuery?: {
        objectId: number;
        objectTypeId: string;
        objectPropertyNames: string[];
    };
    parameters?: JsonValue;
    event?: {
        type: 'SERVERLESS_ACTION_HOOK';
        payload: JsonValue;
    };
    objectId?: number;
    objectTypeId?: string;
}
/**
 * @category Serverless
 */
export interface ServerlessExecutionResponse {
    logId: string;
    response?: JsonValue;
}
/**
 * @category Serverless
 */
export interface ServerlessErrorResponse {
    responseJSON?: {
        message: string;
        correlationId: string;
        category: string;
        subCategory?: string;
        errors?: {
            message: string;
            subCategory: string;
        }[];
    };
    status: number;
}
export type JsonValue = string | number | boolean | null | JsonValue[] | {
    [key: string]: JsonValue;
};
