import { RenderedNodeType } from '../types';
import { EMPTY_CHILDREN } from './constants';
import { debugLog } from './debug';
import { printNode } from './print';
import { find, findAll, findAllChildren, findChild, maybeFind, maybeFindChild, } from './query';
/**
 * Creates a rendered root node.
 *
 * @param document The document that the root belongs to.
 * @returns A rendered root node.
 */
export const createRootNode = (document) => {
    const rootNode = {
        nodeType: RenderedNodeType.Root,
        text: null,
        children: EMPTY_CHILDREN,
        document,
        debugLog: (label) => {
            debugLog(rootNode, label);
        },
        find: (targetComponent, matcher) => {
            return find(rootNode, targetComponent, matcher);
        },
        findAll: (targetComponent, matcher) => {
            return findAll(rootNode, targetComponent, matcher);
        },
        findChild: (targetComponent, matcher) => {
            return findChild(rootNode, targetComponent, matcher);
        },
        findAllChildren: (targetComponent, matcher) => {
            return findAllChildren(rootNode, targetComponent, matcher);
        },
        maybeFind: (targetComponent, matcher) => {
            return maybeFind(rootNode, targetComponent, matcher);
        },
        maybeFindChild: (targetComponent, matcher) => {
            return maybeFindChild(rootNode, targetComponent, matcher);
        },
        toString: () => {
            return printNode(rootNode);
        },
    };
    return rootNode;
};
