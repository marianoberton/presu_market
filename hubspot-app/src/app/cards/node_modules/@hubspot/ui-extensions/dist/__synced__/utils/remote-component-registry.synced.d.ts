import { HubSpotReactComponent, HubSpotReactFragmentProp, UnknownComponentProps } from '../types/shared.synced';
/**
 * Options for creating a remote React component.
 */
interface CreateRemoteComponentOptions<TProps extends UnknownComponentProps = UnknownComponentProps> {
    /**
     * An array of prop names that are allowed to be used as fragment props.
     */
    fragmentProps?: ComponentFragmentPropName<TProps>[];
}
/**
 * Options for creating a remote React component.
 */
interface CreateRemoteCompoundComponentOptions<TProps extends UnknownComponentProps, TCompoundComponentProps> {
    /**
     * An array of prop names that are allowed to be used as fragment props.
     */
    fragmentProps?: ComponentFragmentPropName<TProps>[];
    compoundComponentProperties: TCompoundComponentProps;
}
/**
 * Utility type for filtering out all of the prop names where the value is a ReactNode (excluding primitives).
 * We use this to know which props are allowed to be used as fragment props.
 */
type ComponentFragmentPropName<TProps extends UnknownComponentProps> = {
    [K in keyof TProps]: HubSpotReactFragmentProp extends Required<TProps>[K] ? K : never;
}[keyof TProps & string];
/**
 * Represents a registry of HubSpot-provided React components that is used internally by the UI extensions SDK.
 */
export interface RemoteComponentRegistry {
    /**
     * Creates a new remote React component and registers it with the registry.
     *
     * @param componentName The name of the component to create and register.
     * @param options The options for the remote React component.
     * @returns The remote React component that can be used as a React component.
     */
    createAndRegisterRemoteReactComponent: <TProps extends UnknownComponentProps>(componentName: string, options?: CreateRemoteComponentOptions<TProps>) => HubSpotReactComponent<TProps>;
    /**
     * Creates a new remote compound React component and registers it with the registry. A compound component is a component that is
     * composed of multiple components attached to a single component function.
     *
     * @param componentName The name of the component to create and register.
     * @param options The options for the remote compound React component.
     * @returns The remote compound React component that can be used as a React component.
     */
    createAndRegisterRemoteCompoundReactComponent: <TProps extends UnknownComponentProps, TCompoundComponentProps>(componentName: string, options: CreateRemoteCompoundComponentOptions<TProps, TCompoundComponentProps>) => HubSpotReactComponent<TProps> & TCompoundComponentProps;
    /**
     * Returns the name of a HubSpot-provided React component.
     *
     * @param component The React component to get the name of.
     * @returns The name of the HubSpot-provided React component.
     */
    getComponentName: (component: HubSpotReactComponent<any>) => string | null;
    /**
     * Returns true if the given component name is allowed to be used in HubSpot.
     *
     * @param name The name of the component to check if it is allowed to be used in HubSpot.
     * @returns `true` if the given component name is allowed to be used in HubSpot.
     */
    isAllowedComponentName: (name: string) => boolean;
    /**
     * Returns true if the given prop name is a fragment prop for the given component name.
     *
     * @param componentName The name of the component to check if the prop is a fragment prop for.
     * @param propName The name of the prop to check if it is a fragment prop.
     * @returns `true` if the prop name is a fragment prop for the given component name.
     */
    isComponentFragmentProp: (componentName: string, propName: string) => boolean;
    /**
     * Returns the names of the fragment props for a given component name.
     *
     * @param componentName The name of the component to get the fragment props for.
     * @returns The names of the fragment props for the given component name.
     */
    getComponentFragmentPropNames: (componentName: string) => string[];
}
export declare const createRemoteComponentRegistry: () => RemoteComponentRegistry;
export {};
