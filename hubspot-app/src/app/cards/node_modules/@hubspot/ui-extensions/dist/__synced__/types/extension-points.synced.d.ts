import { ComponentType } from 'react';
import { TypesOfReadOnlyArray } from './shared.synced';
import type { AppHomeContext, BaseContext, CrmContext } from './context.synced';
import type { AppHomeActions, CrmHostActions, SettingsActions, UiePlatformActions } from './actions.synced';
import type { CrmPropertyListProps, CrmAssociationTableProps, CrmDataHighlightProps, CrmReportProps, CrmAssociationPivotProps, CrmAssociationPropertyListProps, CrmAssociationStageTrackerProps, CrmSimpleDeadlineProps, CrmRelativeTimelineProps, CrmStageTrackerProps, CrmStatisticsProps, CrmActionButtonProps, CrmActionLinkProps, CrmCardActionsProps } from './crm.synced';
import type { SettingsContext, GenericContext } from './context.synced';
import type { ServerlessFuncRunner } from './http-requests.synced';
/** @ignore */
export type ExtensionPointAction = (...args: any[]) => Promise<any> | void;
/** @ignore */
export interface ExtensionPointContract {
    actions?: {
        [k: string]: ExtensionPointAction;
    } | {};
    context: BaseContext;
    customComponents: Record<string, ComponentType<any>>;
}
/** @ignore */
export interface StandardCrmExtensionPoint extends ExtensionPointContract {
    actions: CrmHostActions & UiePlatformActions;
    context: CrmContext;
    customComponents: {
        CrmPropertyList: ComponentType<CrmPropertyListProps>;
        CrmAssociationTable: ComponentType<CrmAssociationTableProps>;
        CrmDataHighlight: ComponentType<CrmDataHighlightProps>;
        CrmReport: ComponentType<CrmReportProps>;
        CrmAssociationPivot: ComponentType<CrmAssociationPivotProps>;
        CrmAssociationPropertyList: ComponentType<CrmAssociationPropertyListProps>;
        CrmAssociationStageTracker?: ComponentType<CrmAssociationStageTrackerProps>;
        CrmSimpleDeadline?: ComponentType<CrmSimpleDeadlineProps>;
        CrmRelativeTimeline?: ComponentType<CrmRelativeTimelineProps>;
        CrmStageTracker: ComponentType<CrmStageTrackerProps>;
        CrmStatistics?: ComponentType<CrmStatisticsProps>;
        CrmActionButton?: ComponentType<CrmActionButtonProps>;
        CrmActionLink?: ComponentType<CrmActionLinkProps>;
        CrmCardActions?: ComponentType<CrmCardActionsProps>;
    };
}
/** @deprecated this interface has been replaced by StandardCrmExtensionPoint */
export interface CrmMiddleExtensionPoint extends ExtensionPointContract {
    actions: CrmHostActions;
    context: CrmContext;
    customComponents: {
        CrmPropertyList: ComponentType<CrmPropertyListProps>;
        CrmAssociationTable: ComponentType<CrmAssociationTableProps>;
        CrmDataHighlight: ComponentType<CrmDataHighlightProps>;
        CrmReport: ComponentType<CrmReportProps>;
        CrmAssociationPivot: ComponentType<CrmAssociationPivotProps>;
        CrmAssociationPropertyList: ComponentType<CrmAssociationPropertyListProps>;
        CrmAssociationStageTracker?: ComponentType<CrmAssociationStageTrackerProps>;
        CrmSimpleDeadline?: ComponentType<CrmSimpleDeadlineProps>;
        CrmRelativeTimeline?: ComponentType<CrmRelativeTimelineProps>;
        CrmStageTracker: ComponentType<CrmStageTrackerProps>;
        CrmStatistics?: ComponentType<CrmStatisticsProps>;
        CrmActionButton?: ComponentType<CrmActionButtonProps>;
        CrmActionLink?: ComponentType<CrmActionLinkProps>;
        CrmCardActions?: ComponentType<CrmCardActionsProps>;
    };
}
/** @ignore */
export interface CrmSidebarExtensionPoint extends ExtensionPointContract {
    actions: CrmHostActions & UiePlatformActions;
    context: CrmContext;
    customComponents: {
        CrmActionButton?: ComponentType<CrmActionButtonProps>;
        CrmActionLink?: ComponentType<CrmActionLinkProps>;
    };
}
/** @ignore */
export interface SettingsExtensionPoint extends ExtensionPointContract {
    actions: SettingsActions & UiePlatformActions;
    context: SettingsContext;
}
/** @ignore */
export interface AppHomeExtensionPoint extends ExtensionPointContract {
    actions: AppHomeActions & UiePlatformActions;
    context: AppHomeContext;
}
export interface ExampleCrmComponentProps {
    name: string;
    size: 'sm' | 'md' | 'lg';
    count: number;
}
/** @ignore */
interface RemotePlaygroundExtensionPoint extends ExtensionPointContract {
    actions: {
        warn: () => void;
    };
    context: GenericContext;
    customComponents: {
        ExampleCrmComponent: ComponentType<ExampleCrmComponentProps>;
    };
}
export declare const EXTENSION_POINT_LOCATIONS: readonly ["crm.preview", "crm.record.sidebar", "crm.record.tab", "helpdesk.sidebar", "uie.playground.middle", "settings", "home"];
export type ExtensionPointLocation = TypesOfReadOnlyArray<typeof EXTENSION_POINT_LOCATIONS>;
/** @ignore */
interface LocationToExtensionPoint {
    'uie.playground.middle': RemotePlaygroundExtensionPoint;
    'crm.record.tab': StandardCrmExtensionPoint;
    'crm.preview': StandardCrmExtensionPoint;
    'crm.record.sidebar': CrmSidebarExtensionPoint;
    'helpdesk.sidebar': StandardCrmExtensionPoint;
    settings: SettingsExtensionPoint;
    home: AppHomeExtensionPoint;
}
/**
 * While this resolves to the same result as LocationToExtensionPoint, it ensures that every location
 * from ExtensionPointLocation is explicitly included. This way, EXTENSION_POINT_LOCATIONS becomes
 * the single source of truth for defining all locations.
 */
type _ExtensionPoints = {
    [key in ExtensionPointLocation]: LocationToExtensionPoint[key];
};
export interface ExtensionPoints extends _ExtensionPoints {
}
/** @ignore */
export interface ExtensionPointApi<ExtensionPointName extends keyof ExtensionPoints> {
    runServerlessFunction: ServerlessFuncRunner;
    actions: ExtensionPoints[ExtensionPointName]['actions'];
    context: ExtensionPoints[ExtensionPointName]['context'];
}
export {};
