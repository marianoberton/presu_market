import { ReactNode } from 'react';
import { AllDistances } from '../shared.synced';
/**
 * The props type for {@link !components.Stack}.
 *
 * @category Component Props
 */
export interface StackProps {
    /**
     * Sets the spacing between components.
     */
    distance?: AllDistances;
    /**
     * Sets the content that will render inside the component.
     */
    children?: React.ReactNode;
    /**
     * Arranges components `horizontally` or `vertically` by setting the main axis.
     */
    direction?: 'row' | 'column';
    /**
     * Distributes components along the main axis using the available free space.
     */
    justify?: 'center' | 'end' | 'start';
    /**
     * Distributes components along the cross-axis using the available free space.
     */
    align?: 'start' | 'center' | 'baseline' | 'end' | 'stretch';
    /**
     * Sets the width of the stack.
     */
    width?: 'auto' | '100%';
}
export type FlexJustify = 'center' | 'end' | 'start' | 'around' | 'between';
export type FlexAlign = 'start' | 'center' | 'baseline' | 'end' | 'stretch';
/**
 * The props type for {@link !components.Flex}.
 *
 * @category Component Props
 */
export interface FlexProps {
    /**
     * Sets the spacing between components.
     *
     * @defaultValue `"flush"`
     */
    gap?: AllDistances;
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children?: ReactNode;
    /**
     * Arranges components `horizontally` or `vertically` by setting the main axis.
     *
     * @defaultValue `"row"`
     */
    direction?: 'row' | 'column';
    /**
     * Distributes components along the main axis using the available free space.
     *
     * @defaultValue `"start"`
     */
    justify?: FlexJustify;
    /**
     * Distributes components along the cross-axis using the available free space.
     *
     * @defaultValue `"stretch"`
     */
    align?: FlexAlign;
    /**
     * Overrides Flex's `alignItem` value for this element.
     *
     */
    alignSelf?: FlexAlign;
    /**
     * Whether components will wrap instead of trying to fit on one line.
     *
     * @defaultValue `"nowrap"`
     */
    wrap?: boolean | 'wrap' | 'nowrap';
}
/**
 * The props type for {@link !components.Box}.
 *
 * @category Component Props
 */
export interface BoxProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children: ReactNode;
    /**
     * Overrides Flex's `alignItem` value for this element.
     *
     * @defaultValue `"auto"`
     */
    alignSelf?: 'start' | 'center' | 'baseline' | 'end' | 'stretch' | 'auto';
    /**
     * Sets how the item will grow or shrink when it's a direct ancestor of the Flex component.
     * ##### Options in detail
     *
     *- `initial`: The item is sized according to its width and height properties. It shrinks to its minimum size to fit the container, but does not grow to absorb any extra free space in the flex container.
     *- `auto`: The item is sized according to its width and height properties, but grows to absorb any extra free space in the flex container, and shrinks to its minimum size to fit the container.
     *- `none`: The item is sized according to its width and height properties. It is fully inflexible: it neither shrinks nor grows in relation to the flex container.
     *- `number`:  Tells a component to fill all available space, shared evenly amongst other components with the same parent. The larger the flex given, the higher the ratio of space a component will take compared to its siblings.
     *
     * @defaultValue `"initial"`
     */
    flex?: 'initial' | 'auto' | 'none' | number;
}
/**
 * The props type for {@link !components.Inline}.
 *
 * @category Component Props
 */
export interface InlineProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children?: ReactNode;
    /**
     * Distributes components along the main axis using the available free space.
     * @defaultValue `"start"`
     */
    justify?: FlexJustify;
    /**
     * Distributes components along the cross-axis using the available free space.
     * @defaultValue `"center"`
     */
    align?: FlexAlign;
    /**
     * Sets the spacing between components.
     *
     * @defaultValue `"flush"`
     */
    gap?: AllDistances;
}
/**
 * The props type for {@link !components.AutoGrid}.
 *
 * @category Component Props
 */
export interface AutoGridProps {
    /**
     * Sets the width of each column in the grid.
     * When `flexible` is true, columns will be at least this width (or collapse to container width if smaller), then expand equally to fill available space.
     * When `flexible` is false, columns are exactly this width.
     */
    columnWidth: number;
    /**
     * Sets the spacing between grid items.
     *
     * @defaultValue `"flush"`
     */
    gap?: AllDistances;
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     *
     */
    children?: ReactNode;
    /**
     * Whether columns should expand to fill available space.
     * When true, columns will be at least `columnWidth` but grow equally to fill the container.
     * When false, columns are exactly `columnWidth`.
     *
     * @defaultValue `false`
     */
    flexible?: boolean;
}
