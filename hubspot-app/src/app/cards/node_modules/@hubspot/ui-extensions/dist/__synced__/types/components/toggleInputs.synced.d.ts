/// <reference types="react" />
/**
 * The props type for {@link !components.Checkbox}.
 *
 * @category Component Props
 */
export interface CheckboxProps {
    /**
     * A string representing the value of the input. This is not displayed on the client-side,
     * but on the server this is the value given to the data submitted with the checkbox's name.
     */
    value?: string;
    /**
     * The current status of the input.
     */
    checked?: boolean;
    /** @deprecated use readOnly instead */
    readonly?: boolean;
    /**
     * When set to `true`, the option cannot be selected.
     */
    readOnly?: boolean;
    /**
     * The string that displays below the toggle.
     */
    description?: string;
    /**
     * The unique identifier for the checkbox element.
     */
    name?: string;
    /**
     * The size variation of the checkbox.
     *
     * @defaultValue `"default"`
     */
    variant?: 'default' | 'small';
    /**
     * A function that is called when the `checked` input status changes.
     *
     * @event
     */
    onChange?: (checked: boolean, value: string) => void;
    /** The text that displays in the dropdown menu. */
    children?: React.ReactNode;
    /**
     * Use the inline prop to arrange checkboxes side-by-side.
     */
    inline?: boolean;
    /**
     * When set to `true`, the option will be selected by default. Use it to
     * set the default `checked` state when the component is **uncontrolled**.
     */
    initialIsChecked?: boolean;
    /**
     * Accessibility label. It should be present when the checkbox has no label(children).
     */
    'aria-label'?: string;
}
/**
 * The props type for {@link !components.RadioButton}.
 * @category Component Props
 * @interface
 */
export type RadioButtonProps = Omit<CheckboxProps, 'aria-label'>;
export type ToggleGroupOption = {
    /** The text that displays in the dropdown menu. */
    label: string;
    /** The unique value that is submitted with the form. */
    value: string;
    /** When set to `true`, the option will be selected by default. */
    initialIsChecked?: boolean;
    /** When set to `true`, the option cannot be selected. */
    readonly?: boolean;
    /** The string that displays below the toggle. */
    description?: string;
};
interface ToggleGroupListBaseProps {
    name: ToggleGroupProps['name'];
    options: ToggleGroupProps['options'];
    variant: ToggleGroupProps['variant'];
    inline?: boolean;
}
export interface CheckboxListProps extends ToggleGroupListBaseProps {
    value?: CheckboxGroupProps['value'];
    onChange?: CheckboxGroupProps['onChange'];
}
export interface RadioButtonListProps extends ToggleGroupListBaseProps {
    value?: RadioButtonGroupProps['value'];
    onChange?: RadioButtonGroupProps['onChange'];
}
type ToggleType = 'checkboxList' | 'radioButtonList';
export interface CommonGroupProps {
    /**
     * Denotes the type of list to render.
     */
    toggleType?: ToggleType;
    /**
     * The unique identifier for the toggle group element.
     */
    name: string;
    /**
     * The label that displays above the toggle group.
     */
    label: string;
    /**
     * The text to display if the input has an error.
     */
    validationMessage?: string;
    /**
     * When set to `true`, displays a required indicator next to the toggle group.
     *
     * @defaultValue `false`
     */
    required?: boolean;
    /**
     * Text that will appear in a tooltip next to the toggle group label.
     */
    tooltip?: string;
    /**
     * When set to `true`, `validationMessage` is displayed as an error message if provided. The input will also render its error state to let the user know there is an error. If left false, `validationMessage` is displayed as a success message.
     *
     * @defaultValue `false`
     */
    error?: boolean;
    /**
     * An array of options to display in the dropdown menu.
     *
     * @defaultValue `[]`
     */
    options: Array<ToggleGroupOption>;
    /**
     * When set to `true`, stacks the options horizontally.
     *
     * @defaultValue `false`
     */
    inline?: boolean;
    /**
     * The size variation of the individual options.
     *
     * @defaultValue `"default"`
     */
    variant?: 'default' | 'small';
    value?: string[] | string;
}
type CheckboxGroupProps = {
    /**
     * Denotes the type of list to render.
     *
     * @defaultValue `"checkboxList"`
     */
    toggleType: 'checkboxList';
    /**
     * A function that is called with the new value or values when the list is updated.
     *
     * @event
     */
    onChange?: (value: string[]) => void;
    /**
     * The value of the toggle group.
     */
    value?: string[];
} & CommonGroupProps;
type RadioButtonGroupProps = {
    /**
     * Denotes the type of list to render.
     *
     * @defaultValue `"checkboxList"`
     */
    toggleType: 'radioButtonList';
    /**
     * A function that is called with the new value or values when the list is updated.
     *
     * @event
     */
    onChange?: (value: string) => void;
    /**
     * The value of the toggle group.
     */
    value?: string;
} & CommonGroupProps;
type DefaultToggleTypeProps = {
    toggleType?: never;
} & CheckboxGroupProps;
/**
 * The props type for {@link !components.ToggleGroup}.
 *
 * @interface
 * @category Component Props
 */
export type ToggleGroupProps = CheckboxGroupProps | RadioButtonGroupProps | DefaultToggleTypeProps;
export {};
