import { HubSpotReactComponent, HubSpotReactFragmentProp, UnknownComponentProps } from '../../__synced__/types/shared.synced';
/**
 * The type of a rendered node.
 */
export declare enum RenderedNodeType {
    Root = "root",
    Fragment = "fragment",
    Element = "element",
    Text = "text"
}
/**
 * Extracts event property names from a props type, filtering for properties that are functions
 */
type EventNamesForProps<TProps extends UnknownComponentProps> = {
    [K in keyof Required<TProps>]: Required<TProps>[K] extends Function ? K : never;
}[keyof TProps];
interface CommonQueryMethods {
    /**
     * Finds the first descendant element node that matches the given component.
     *
     * @param component The component to find.
     * @param matcher An optional matcher to filter the elements.
     * @returns The first element node that matches the given component or `null` if no match is found.
     */
    maybeFind<TProps extends UnknownComponentProps>(component: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps>): RenderedElementNode<TProps> | null;
    /**
     * Finds the first descendant element node that matches the given component. If no match is found, an error will be thrown.
     *
     * @param component The component to find.
     * @param matcher An optional matcher to filter the elements.
     * @returns The first element node that matches the given component.
     */
    find<TProps extends UnknownComponentProps>(component: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps>): RenderedElementNode<TProps>;
    /**
     * Finds all descendant element nodes that match the given component.
     *
     * @param component The component to find.
     * @param matcher An optional matcher to filter the elements.
     * @returns An array of element nodes that match the given component.
     */
    findAll<TProps extends UnknownComponentProps>(component: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps>): RenderedElementNode<TProps>[];
    /**
     * Finds the first direct child element node that matches the given component.
     *
     * @param component The component to find.
     * @param matcher An optional matcher to filter the elements.
     * @returns The first child element node that matches the given component.
     */
    findChild<TProps extends UnknownComponentProps>(component: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps>): RenderedElementNode<TProps>;
    /**
     * Finds the first direct child element node that matches the given component.
     *
     * @param component The component to find.
     * @param matcher An optional matcher to filter the elements.
     * @returns The first child element node that matches the given component or `null` if no match is found.
     */
    maybeFindChild<TProps extends UnknownComponentProps>(component: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps>): RenderedElementNode<TProps> | null;
    /**
     * Finds all direct child element nodes that match the given component.
     *
     * @param component The component to find.
     * @param matcher An optional matcher to filter the elements.
     * @returns An array of child element nodes that match the given component.
     */
    findAllChildren<TProps extends UnknownComponentProps>(component: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps>): RenderedElementNode<TProps>[];
}
interface BaseRenderedParentNode {
    /**
     * The child nodes
     */
    children: RenderedChildNode[];
}
/**
 * Represents a root node of a rendered component.
 *
 * NOTE: Rendered root nodes are immutable and are part of a snapshot for a single render cycle. They become immediately stale when a new render occurs.
 */
export interface RenderedRootNode extends BaseRenderedParentNode, CommonQueryMethods {
    /**
     * The type of the node (always `RenderedNodeType.Root` for a root node).
     */
    nodeType: RenderedNodeType.Root;
    /**
     * The text content of the root node or `null` if the root node does not have any text content.
     */
    text: string | null;
    /**
     * Logs a string representation of the root node as a console log.
     */
    debugLog: (label?: string) => void;
    /**
     * Returns a string representation of the root node.
     *
     * @returns A string representation of the root node.
     */
    toString: () => string;
}
/**
 * Represents a fragment node passed as a prop to a rendered component.
 *
 * NOTE: Rendered fragment nodes are immutable and are part of a snapshot for a single render cycle. They become immediately stale when a new render occurs.
 */
export interface RenderedFragmentNode extends BaseRenderedParentNode, CommonQueryMethods {
    /**
     * The type of the node (always `RenderedNodeType.Fragment` for a fragment node).
     */
    nodeType: RenderedNodeType.Fragment;
    /**
     * The text content of the fragment node or `null` if the fragment node does not have any text content.
     */
    text: string | null;
    /**
     * Logs a string representation of the fragment node as a console log.
     */
    debugLog: (label?: string) => void;
    /**
     * Returns a string representation of the fragment node.
     */
    toString: () => string;
}
type RenderPropsFromComponentProps<TProps extends UnknownComponentProps> = {
    [K in keyof TProps]: HubSpotReactFragmentProp extends TProps[K] ? RenderedFragmentNode : TProps[K];
};
/**
 * Represents an element node of a rendered component.
 *
 * NOTE: Rendered elements are immutable and are part of a snapshot for a single render cycle. They become immediately stale when a new render occurs.
 */
export interface RenderedElementNode<TProps extends UnknownComponentProps = UnknownComponentProps> extends BaseRenderedParentNode, CommonQueryMethods {
    /**
     * The type of the node (always `RenderedNodeType.Element` for an element node).
     */
    nodeType: RenderedNodeType.Element;
    /**
     * The name of the element node.
     */
    name: string;
    /**
     * The props passed to the element node.
     */
    props: RenderPropsFromComponentProps<TProps>;
    /**
     * The text content of the element node or `null` if the element node does not have any text content.
     */
    text: string | null;
    /**
     * Logs a string representation of the element node as a console log.
     *
     * @param label The label to log.
     */
    debugLog: (label?: string) => void;
    /**
     * Returns a string representation of the element node.
     */
    toString: () => string;
    /**
     * Triggers an event function on the element node.
     *
     * @param eventPropName The name of the event to trigger.
     * @param eventArg The argument to pass to the event.
     */
    trigger<TEventPropName extends EventNamesForProps<TProps>>(eventPropName: TEventPropName, eventArg?: TProps[TEventPropName]): void;
}
/**
 * Represents a text node of a rendered component.
 *
 * NOTE: Rendered text nodes are immutable and are part of a snapshot for a single render cycle. They become immediately stale when a new render occurs.
 */
export interface RenderedTextNode {
    /**
     * The type of the node (always `RenderedNodeType.Text` for a text node).
     */
    nodeType: RenderedNodeType.Text;
    /**
     * The text content of the text node.
     */
    text: string;
    /**
     * Returns a string representation of the text node.
     */
    toString: () => string;
}
/**
 * Represents a child node of a parent node.
 *
 * NOTE: Rendered child nodes are immutable and are part of a snapshot for a single render cycle. They become immediately stale when a new render occurs.
 */
export type RenderedChildNode = RenderedElementNode<UnknownComponentProps> | RenderedTextNode;
/**
 * Represents a parent node of a rendered component.
 *
 * NOTE: Rendered parent nodes are immutable and are part of a snapshot for a single render cycle. They become immediately stale when a new render occurs.
 */
export type RenderedParentNode = RenderedElementNode<UnknownComponentProps> | RenderedRootNode | RenderedFragmentNode;
/**
 * A predicate that matches an element node.
 *
 * @param node The node to match.
 * @returns Whether the node matches the predicate.
 */
export type ElementMatcherPredicate<TProps extends UnknownComponentProps> = (node: RenderedElementNode<TProps>) => boolean;
/**
 * A matcher that matches an element node based on either a predicate or a partial set of properties.
 */
export type ElementMatcher<TProps extends UnknownComponentProps> = ElementMatcherPredicate<TProps> | Partial<TProps>;
/**
 * Options for the waitFor function.
 */
export interface WaitForOptions {
    /**
     * The timeout in milliseconds. Defaults to 1000.
     */
    timeoutInMs?: number;
}
/**
 * A result of a render operation.
 */
export interface RenderResult extends CommonQueryMethods {
    /**
     * Waits for the given check to pass. If the check does not pass within the allowed amount of time, an error will be thrown.
     *
     * @param check The check to wait for.
     * @returns A promise that resolves when the check passes.
     */
    waitFor: (check: () => void, options?: WaitForOptions) => Promise<void>;
    /**
     * Logs a string representation of the rendered output as a console log.
     *
     * @param label The label to log.
     */
    debugLog: (label?: string) => void;
    /**
     * Returns the root node.
     *
     * @returns The root node.
     */
    getRootNode: () => RenderedRootNode;
}
export type RenderedNode = RenderedElementNode<any> | RenderedRootNode | RenderedFragmentNode | RenderedTextNode;
export {};
