import type { RemoteComponent, RemoteFragment, RemoteRoot, RemoteText } from '@remote-ui/core';
import type { RenderedElementNode, RenderedFragmentNode, RenderedNode, RenderedParentNode, RenderedRootNode, RenderedTextNode } from '../types';
export type RemoteChildNode = RemoteComponent<any, RemoteRoot> | RemoteText<RemoteRoot>;
export type RemoteParentNode = RemoteRoot | RemoteComponent<any, RemoteRoot> | RemoteFragment;
/**
 * Represents a rendered document.
 */
export interface RenderedDocumentInternal {
    /**
     * The root node of the document.
     */
    rootNode: RenderedRootNodeInternal | null;
    /**
     * Adds the name of an invalid component to the document.
     *
     * @param name The name of the invalid component.
     */
    addInvalidComponentName: (name: string) => void;
    /**
     * @returns the names of the invalid components.
     */
    getInvalidComponentNames: () => string[];
    /**
     * @returns Returns `true` if the document has invalid component types. `false` otherwise.
     */
    hasInvalidComponentNames: () => boolean;
    /**
     * Used to wrap the execution of a function that updates the rendered DOM.
     * This is used to validate the rendered DOM after the function has been executed.
     *
     * @param run The function to execute.
     */
    batchUpdate: (run: () => void) => void;
}
/**
 * Adds the `document` property to the rendered node. We do not include this in the public types because it is not
 * part of the public API, but we need it for internal use.
 */
type MakeRenderedNodeInternal<TRenderedNode extends RenderedNode> = TRenderedNode & {
    document: RenderedDocumentInternal;
};
export type RenderedElementNodeInternal = MakeRenderedNodeInternal<RenderedElementNode>;
export type RenderedTextNodeInternal = MakeRenderedNodeInternal<RenderedTextNode>;
export type RenderedRootNodeInternal = MakeRenderedNodeInternal<RenderedRootNode>;
export type RenderedFragmentNodeInternal = MakeRenderedNodeInternal<RenderedFragmentNode>;
export type RenderedParentNodeInternal = MakeRenderedNodeInternal<RenderedParentNode>;
export {};
