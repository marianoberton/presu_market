import type { ReactNode } from 'react';
import type { RemoteFragment } from '@remote-ui/core';
import type { AllDistances, ExtensionEvent } from '../types/shared.synced';
import type { ReactionsHandler } from '../types/reactions.synced';
/**
 * @ignore
 * @experimental do not use in production
 */
interface BaseLayout {
    fullWidth?: boolean;
    fullHeight?: boolean;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export type FlexJustify = 'center' | 'end' | 'start' | 'around' | 'between';
/**
 * @ignore
 * @experimental do not use in production
 */
export type FlexAlign = 'start' | 'center' | 'baseline' | 'end' | 'stretch';
/**
 * @ignore
 * @experimental do not use in production
 */
export interface Stack2Props extends BaseLayout {
    align?: FlexAlign;
    gap?: AllDistances;
    children?: ReactNode;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface CenterProps extends BaseLayout {
    maxContentSize?: number | string;
    gutter?: AllDistances;
    children?: ReactNode;
}
/**
 * @ignore
 * @experimental
 */
export interface MediaObjectProps {
    align?: 'start' | 'center' | 'baseline' | 'end' | 'stretch';
    spacing?: 'none' | 'extra-small' | 'small' | 'medium' | 'large' | 'extra-large';
    children?: ReactNode;
    itemLeft?: RemoteFragment;
    itemRight?: RemoteFragment;
}
export interface GridProps {
    justify?: FlexJustify;
    align?: FlexAlign;
    gap?: AllDistances;
    size?: number;
    children?: ReactNode;
}
export interface GridItemProps {
    size?: number;
    children?: ReactNode;
    offset?: number;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface SettingsViewProps {
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     */
    children: ReactNode;
    /**
     * If set to `true`, will show the save bar with "cancel" and  "save" buttons at the bottom of the page.
     *
     * @defaultValue `false`
     */
    saveBarVisible?: boolean;
    /**
     * Used in the save bar to let the user know how many settings they've changed and not yet saved.
     */
    numberOfSettingsChanged?: number;
    /**
     * The function that will be invoked when the save button in the save bar is clicked.
     *
     * @event
     */
    onSave?: ReactionsHandler<ExtensionEvent>;
    /**
     * The function that will be invoked when the cancel button in the save bar is clicked.
     *
     * @event
     */
    onCancel?: ReactionsHandler<ExtensionEvent>;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface ExpandableTextProps {
    children: ReactNode;
    maxHeight?: number;
    expandButtonText?: string;
    collapseButtonText?: string;
    expanded?: boolean;
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface PopoverProps {
    /**
     * A unique ID for the popover. Used to identify the popover in the overlay system.
     *
     */
    id: string;
    /**
     * The content to render inside the popover.
     */
    children: ReactNode;
    /**
     * The placement of the popover.
     *
     * @defaultValue `top`
     */
    placement?: 'left' | 'right' | 'top' | 'bottom';
    /**
     * The variant of the popover.
     *
     * @defaultValue `default`
     */
    variant?: 'default' | 'shepherd' | 'longform';
    /**
     * If set to `true`, will show the close button in the popover. PopoverHeader required to display close button.
     *
     * @defaultValue `false`
     */
    showCloseButton?: boolean;
    /**
     * The size of the arrow in the popover. If set to `none`, the arrow will not be displayed.
     *
     * @defaultValue `small`
     */
    arrowSize?: 'none' | 'small' | 'medium';
}
/**
 * @ignore
 * @experimental do not use in production
 */
export interface FileInputProps {
    value?: File | {
        name: string;
    };
    name: string;
    onChange: (event: any) => void;
}
/**
 * Generic collection of props for all inputs (experimental version)
 * @internal
 * */
export interface BaseInputProps<T = string, V = string> {
    /**
     * The label text to display for the form input element.
     */
    label: string;
    /**
     * The unique identifier for the input element, this could be thought of as the HTML5 [Input element's name attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name).
     */
    name: string;
    /**
     * The value of the input.
     */
    value?: T;
    /**
     * Determines if the required indicator should be displayed.
     *
     * @defaultValue `false`
     */
    required?: boolean;
    /**
     * Determines if the field is editable or not.
     *
     * @defaultValue `false`
     */
    readOnly?: boolean;
    /**
     * Instructional message to display to the user to help understand the purpose of the input.
     */
    description?: string;
    /**
     * Text that will appear in a tooltip next to the input label.
     */
    tooltip?: string;
    /**
     * Text that appears in the input when it has no value set.
     */
    placeholder?: string;
    /**
     * If set to `true`, `validationMessage` is displayed as an error message, if it was provided. The input will also render its error state to let the user know there is an error. If set to `false`, `validationMessage` is displayed as a success message.
     *
     * @defaultValue `false`
     */
    error?: boolean;
    /**
     * The value of the input on the first render.
     */
    defaultValue?: T;
    /**
     * The text to show under the input for error or success validations.
     */
    validationMessage?: string;
    /**
     * A callback function that is invoked when the value is committed. Currently these times are `onBlur` of the input and when the user submits the form.
     *
     * @event
     */
    onChange?: (value: V) => void;
    /**
     * A function that is called and passed the value every time the field is edited by the user. It is recommended that you do not use this value to update state, that is what `onChange` should be used for. Instead this should be used for validation.
     *
     * @event
     */
    onInput?: (value: V) => void;
    /**
     * A function that is called and passed the value every time the field loses focus.
     *
     * @event
     */
    onBlur?: (value: V) => void;
    /**
     * A function that is called and passed the value every time the field gets focused.
     *
     * @event
     */
    onFocus?: (value: V) => void;
}
export {};
/**
 * @ignore
 * @experimental do not use in production
 */
