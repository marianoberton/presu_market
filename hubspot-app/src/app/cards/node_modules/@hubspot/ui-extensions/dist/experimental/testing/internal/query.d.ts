import type { HubSpotReactComponent, UnknownComponentProps } from '../../../__synced__/types/shared.synced';
import type { ElementMatcher, RenderedElementNode } from '../types';
import type { RenderedParentNodeInternal } from './types-internal';
/**
 * Finds the first descendant element node that matches the given component.
 *
 * @param parentNode The parent node to search in.
 * @param targetComponent The component to find.
 * @param matcher An optional matcher to filter the elements.
 * @returns The first element node that matches the given component or `null` if no match is found.
 */
export declare const maybeFind: <TProps extends UnknownComponentProps>(parentNode: RenderedParentNodeInternal, targetComponent: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps> | undefined) => RenderedElementNode<TProps> | null;
/**
 * Finds the first descendant element node that matches the given component.
 *
 * @param parentNode The parent node to search in.
 * @param targetComponent The component to find.
 * @param matcher An optional matcher to filter the elements.
 * @returns The first element node that matches the given component.
 */
export declare const find: <TProps extends UnknownComponentProps>(parentNode: RenderedParentNodeInternal, targetComponent: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps> | undefined) => RenderedElementNode<TProps>;
/**
 * Finds all descendant element nodes that match the given component.
 *
 * @param parentNode The parent node to search in.
 * @param targetComponent The component to find.
 * @param matcher An optional matcher to filter the elements.
 * @returns An array of element nodes that match the given component.
 */
export declare const findAll: <TProps extends UnknownComponentProps>(parentNode: RenderedParentNodeInternal, targetComponent: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps> | undefined) => RenderedElementNode<TProps>[];
/**
 * Finds the first direct child element node that matches the given component.
 *
 * @param parentNode The parent node to search in.
 * @param targetComponent The component to find.
 * @param matcher An optional matcher to filter the elements.
 * @returns The first child element node that matches the given component.
 */
export declare const findChild: <TProps extends UnknownComponentProps>(parentNode: RenderedParentNodeInternal, targetComponent: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps> | undefined) => RenderedElementNode<TProps>;
/**
 * Finds the first direct child element node that matches the given component.
 *
 * @param parentNode The parent node to search in.
 * @param targetComponent The component to find.
 * @param matcher An optional matcher to filter the elements.
 * @returns The first child element node that matches the given component.
 */
export declare const maybeFindChild: <TProps extends UnknownComponentProps>(parentNode: RenderedParentNodeInternal, targetComponent: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps> | undefined) => RenderedElementNode<TProps> | null;
/**
 * Finds all direct child element nodes that match the given component.
 *
 * @param parentNode The parent node to search in.
 * @param targetComponent The component to find.
 * @param matcher An optional matcher to filter the elements.
 * @returns An array of child element nodes that match the given component.
 */
export declare const findAllChildren: <TProps extends UnknownComponentProps>(parentNode: RenderedParentNodeInternal, targetComponent: HubSpotReactComponent<TProps>, matcher?: ElementMatcher<TProps> | undefined) => RenderedElementNode<TProps>[];
