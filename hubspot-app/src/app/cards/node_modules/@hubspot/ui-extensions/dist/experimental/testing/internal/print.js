import { __hubSpotComponentRegistry } from '../../../__synced__/remoteComponents.synced';
import { isRenderedElementNode, isRenderedFragmentNode, isRenderedRootNode, isRenderedTextNode, } from '../type-utils';
const INDENT_STRING = '  ';
const printTextNode = (node, indent, printContext) => {
    printContext.append(`${indent}${JSON.stringify(node.text)}\n`);
};
const propValueToString = (value) => {
    if (typeof value === 'function') {
        return '={function}';
    }
    else if (typeof value === 'number') {
        return `={${value}}`;
    }
    else if (typeof value === 'string') {
        return `=${JSON.stringify(value)}`;
    }
    else if (typeof value === 'boolean') {
        return value === true ? '' : '={false}';
    }
    return `={${JSON.stringify(value)}}`;
};
const printElementProps = (name, props, indent, printContext) => {
    for (const [propName, propValue] of Object.entries(props)) {
        if (__hubSpotComponentRegistry.isComponentFragmentProp(name, propName)) {
            printContext.append(` ${propName}={`);
            printFragmentNode(propValue, indent, printContext);
            printContext.append(`}`);
        }
        else {
            printContext.append(` ${propName}${propValueToString(propValue)}`);
        }
    }
};
const printElementStart = (node, indent, printContext) => {
    const { name } = node;
    printContext.append(indent);
    printContext.append(`<${name}`);
    if (!__hubSpotComponentRegistry.isAllowedComponentName(name)) {
        printContext.foundInvalidComponents.add(name);
        if (printContext.options.markInvalidComponents) {
            printContext.append('⚠️');
        }
    }
};
const printElementNode = (node, indent, printContext) => {
    const hasChildren = node.children.length > 0;
    const { name, props } = node;
    if (hasChildren) {
        printElementStart(node, indent, printContext);
        printElementProps(name, props, indent + INDENT_STRING, printContext);
        printContext.append(`>\n`);
        printChildren(node, indent + INDENT_STRING, printContext);
        printContext.append(`${indent}</${name}>\n`);
    }
    else {
        printElementStart(node, indent, printContext);
        printElementProps(name, props, indent + INDENT_STRING, printContext);
        printContext.append(`/>\n`);
    }
};
const printChildren = (node, indent, printContext) => {
    const { children } = node;
    for (const child of children) {
        if (isRenderedTextNode(child)) {
            printTextNode(child, indent, printContext);
        }
        else if (isRenderedElementNode(child)) {
            printElementNode(child, indent, printContext);
        }
        else {
            throw new Error(`Illegal State. Invalid rendered node type: ${child.nodeType}`);
        }
    }
};
const DEFAULT_PRINT_OPTIONS = {
    markInvalidComponents: true,
    listInvalidComponents: false,
};
const printFragmentNode = (node, indent, printContext) => {
    printContext.append(`<>\n`);
    printChildren(node, indent + INDENT_STRING, printContext);
    printContext.append(`${indent}</>`);
};
export const printNode = (rootNode, options = DEFAULT_PRINT_OPTIONS) => {
    const { listInvalidComponents } = options;
    let output = '';
    const printContext = {
        append: (str) => {
            output += str;
        },
        options,
        foundInvalidComponents: new Set(),
    };
    if (isRenderedRootNode(rootNode)) {
        printContext.append(`<>\n`);
        printChildren(rootNode, INDENT_STRING, printContext);
        printContext.append(`</>`);
    }
    else if (isRenderedFragmentNode(rootNode)) {
        printFragmentNode(rootNode, '', printContext);
    }
    else {
        printElementNode(rootNode, '', printContext);
    }
    if (listInvalidComponents && printContext.foundInvalidComponents.size > 0) {
        printContext.append(`\n⚠️  Invalid components:\n`);
        const foundInvalidComponents = [...printContext.foundInvalidComponents];
        foundInvalidComponents.sort();
        for (const invalidComponentName of foundInvalidComponents) {
            printContext.append(`- ${invalidComponentName}\n`);
        }
    }
    return output.replace(/\n$/, '');
};
