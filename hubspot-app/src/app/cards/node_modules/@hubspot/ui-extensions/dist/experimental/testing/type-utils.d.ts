import { type RenderedElementNode, type RenderedFragmentNode, type RenderedNode, type RenderedRootNode, type RenderedTextNode } from './types';
/**
 * Type guard to check if a node is a rendered element node.
 *
 * @param node The node to check.
 * @returns `true` if the node is a rendered element node.
 */
export declare const isRenderedElementNode: (node: RenderedNode | null | undefined) => node is RenderedElementNode<import("../..").UnknownComponentProps>;
/**
 * Type guard to check if a node is a rendered text node.
 *
 * @param node The node to check.
 * @returns `true` if the node is a rendered text node.
 */
export declare const isRenderedTextNode: (node: RenderedNode | null | undefined) => node is RenderedTextNode;
/**
 * Type guard to check if a node is a rendered root node.
 *
 * @param node The node to check.
 * @returns `true` if the node is a rendered root node.
 */
export declare const isRenderedRootNode: (node: RenderedNode | null | undefined) => node is RenderedRootNode;
/**
 * Type guard to check if a node is a rendered fragment node.
 *
 * @param node The node to check.
 * @returns `true` if the node is a rendered fragment node.
 */
export declare const isRenderedFragmentNode: (node: RenderedNode | null | undefined) => node is RenderedFragmentNode;
