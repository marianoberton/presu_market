import { ReactNode } from 'react';
import { TShirtSizes } from './shared.synced';
/** @ignore */
export interface CrmDataHighlightProps {
    properties: Array<string>;
    objectTypeId?: string;
    objectId?: number;
}
/** @ignore */
export interface CrmReportProps {
    reportId: string;
    use?: 'associations' | 'subject' | 'unfiltered';
}
/** @ignore */
export interface CrmPropertyListProps {
    properties: Array<string>;
    direction?: string;
    objectTypeId?: string;
    objectId?: number;
}
/** @ignore */
type CrmSortDescriptor = {
    columnName: string;
    direction: 1 | -1;
};
/** @ignore */
interface CrmSearchFilter {
    operator: 'EQ' | 'NEQ' | 'LT' | 'LTE' | 'GT' | 'GTE' | 'BETWEEN' | 'IN' | 'NOT_IN' | 'HAS_PROPERTY' | 'NOT_HAS_PROPERTY';
    value?: string | number;
    values?: string | number;
    highValue?: string | number;
    property: string;
}
/** @ignore */
export interface CrmAssociationTableProps {
    objectTypeId: string;
    propertyColumns: Array<string>;
    quickFilterProperties?: Array<string>;
    searchable?: boolean;
    pagination?: boolean;
    associationLabelFilter?: boolean;
    pageSize?: number;
    preFilters?: Array<CrmSearchFilter>;
    sort?: Array<CrmSortDescriptor>;
}
/** @ignore */
export interface CrmAssociationPivotProps {
    objectTypeId: string;
    associationLabels?: Array<string>;
    maxAssociations?: number;
    preFilters?: Array<CrmSearchFilter>;
    sort?: Array<CrmSortDescriptor>;
}
/** @ignore */
export interface CrmAssociationStageTrackerProps {
    objectTypeId: string;
    properties: Array<string>;
    associationLabels?: Array<string>;
    filters?: Array<CrmSearchFilter>;
    showProperties?: boolean;
    sort?: Array<CrmSortDescriptor>;
}
/** @ignore */
export interface CrmSimpleDeadlineProps {
    endDatePropertyName: string;
    properties: Array<string>;
    progressTheme?: ProgressTheme;
    showProperties?: boolean;
    startDatePropertyName: string;
}
/** @ignore */
export interface CrmRelativeTimelineProps {
    properties: Array<string>;
}
/** @ignore */
interface BaseCrmStatisticItem {
    label: string;
}
/** @ignore */
interface FilterGroup {
    filters: Array<CrmSearchFilter>;
}
/** @ignore */
interface ProgressTheme {
    backgroundColor?: string;
    completedColor?: string;
    upcomingColor?: string;
    borderRadius?: string | number;
    height?: string | number;
    completedGradient?: Gradient;
    upcomingGradient?: Gradient;
}
/** @ignore */
interface PercentileMetricItem extends BaseCrmStatisticItem {
    statisticType: 'PERCENTILES';
    propertyName: string;
    percentile: number;
    filterGroups?: Array<FilterGroup>;
}
/** @ignore */
type CrmStatisticItem = BasicMetricItem | PercentileMetricItem;
/** @ignore */
export interface CrmStatisticsProps {
    objectTypeId: string;
    statistics: Array<CrmStatisticItem>;
}
/** @ignore */
interface BasicMetricItem extends BaseCrmStatisticItem {
    statisticType: 'SUM' | 'AVG' | 'MIN' | 'MAX' | 'DISTINCT_APPROX' | 'COUNT';
    propertyName: string;
    filterGroups?: Array<FilterGroup>;
}
/** @ignore */
interface Gradient {
    startColor: string;
    endColor: string;
}
/** @ignore */
export interface CrmStageTrackerProps {
    objectId?: number;
    objectTypeId?: string;
    properties: Array<string>;
    showProperties?: boolean;
}
/** @ignore */
export interface CrmAssociationPropertyListProps {
    objectTypeId: string;
    properties: Array<string>;
    associationLabels?: Array<string>;
    filters?: Array<CrmSearchFilter>;
    sort?: Array<CrmSortDescriptor>;
}
/** @ignore */
interface ObjectCoordinates {
    objectTypeId: string;
    objectId: number;
}
/** @ignore */
interface OpenRecordAssociationFormArgs {
    objectTypeId: string;
    association: {
        objectTypeId: string;
        objectId: number;
    };
}
/** @ignore */
interface ActivityCreatorActionArgs {
    objectTypeId: string;
    objectId: number;
    windowVariant?: 'windowed' | 'fullscreen';
    initialEmailBody?: string;
    initialEmailSubject?: string;
}
/** @ignore */
interface EngagementAppLinkArgs {
    objectId: number | string;
    objectTypeId: string;
    engagementId: number | string;
    external?: boolean;
}
/** @ignore */
interface RecordAppLinkArgs {
    includeEschref?: boolean;
    objectId: number;
    objectTypeId: string;
    external?: boolean;
}
/** @ignore */
interface PageAppLinkArgs {
    path: string;
    external?: boolean;
}
/** @ignore */
interface ExternalUrlArgs {
    href: string;
}
/** @ignore */
interface OpenRecordCreatorFormArgs {
    objectTypeId: string;
}
/** @ignore */
interface ActionArgs {
    PREVIEW_OBJECT: ObjectCoordinates;
    ADD_NOTE: ActivityCreatorActionArgs;
    ADD_TASK: ActivityCreatorActionArgs;
    SEND_EMAIL: ActivityCreatorActionArgs;
    SCHEDULE_MEETING: ActivityCreatorActionArgs;
    OPEN_RECORD_CREATOR_FORM: OpenRecordCreatorFormArgs;
    OPEN_RECORD_ASSOCIATION_FORM: OpenRecordAssociationFormArgs;
    ENGAGEMENT_APP_LINK: EngagementAppLinkArgs;
    RECORD_APP_LINK: RecordAppLinkArgs;
    PAGE_APP_LINK: PageAppLinkArgs;
    EXTERNAL_URL: ExternalUrlArgs;
    OPEN_WORKFLOW_ENROLLMENT_MODAL: ObjectCoordinates;
}
/** @ignore */
export type ArgsFor<SpecificActionType extends ActionType> = ActionArgs[SpecificActionType];
export type ActionType = 'PREVIEW_OBJECT' | 'ADD_NOTE' | 'ADD_TASK' | 'SEND_EMAIL' | 'SCHEDULE_MEETING' | 'OPEN_RECORD_CREATOR_FORM' | 'OPEN_RECORD_ASSOCIATION_FORM' | 'ENGAGEMENT_APP_LINK' | 'RECORD_APP_LINK' | 'PAGE_APP_LINK' | 'EXTERNAL_URL' | 'OPEN_WORKFLOW_ENROLLMENT_MODAL';
/** @ignore */
interface BaseActionComponent {
    children: ReactNode;
    actionType: ActionType;
    actionContext: ArgsFor<ActionType>;
    onError?: (errors: string[]) => void;
}
/** @ignore */
export interface CrmActionButtonProps extends BaseActionComponent {
    variant?: 'primary' | 'secondary' | 'destructive';
    type?: 'button' | 'reset' | 'submit';
    size?: TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'];
    onClick?: () => void;
}
/** @ignore */
export interface CrmActionLinkProps extends BaseActionComponent {
    variant?: 'primary' | 'light' | 'dark' | 'destructive';
}
/** @ignore */
export interface ActionLibraryButtonCardActionConfig<SpecificActionType extends ActionType = ActionType> {
    type: 'action-library-button';
    actionType: SpecificActionType;
    actionContext: ArgsFor<SpecificActionType>;
    label?: string;
    disabled?: boolean;
    tooltipText?: string;
}
/** @ignore */
export type DropdownCardActionConfigOptions = [
    ActionLibraryButtonCardActionConfig,
    ...ActionLibraryButtonCardActionConfig[]
];
/** @ignore */
export interface DropdownCardActionConfig {
    type: 'dropdown';
    options: DropdownCardActionConfigOptions;
    label?: string;
    disabled?: boolean;
    tooltipText?: string;
}
/** @ignore */
type ErrorHandler = (errors: string[]) => void;
/** @ignore */
type CardActionConfig = ActionLibraryButtonCardActionConfig | DropdownCardActionConfig;
/** @ignore */
export type CrmCardActionsProps = {
    actionConfigs: Array<CardActionConfig>;
    onError?: ErrorHandler;
};
export {};
