import type { ReactElement, ComponentType, ReactNode } from 'react';
export type UnknownComponentProps = Record<string, any>;
/**
 * Represents a HubSpot-provided React component.
 */
export type HubSpotReactComponent<TProps extends UnknownComponentProps = UnknownComponentProps> = ComponentType<TProps>;
/**
 * Represents a fragment property for a HubSpot-provided React component that accepts a React.ReactElement, string, or null.
 * NOTE: UI extension components do _not_ support arrays as a fragment property values.
 */
export type HubSpotReactFragmentProp = ReactElement | string | null;
export declare class ExtensionEvent {
    type: string;
    bubbles: boolean;
    timeStamp: number;
    id: string;
    constructor(event: Event);
}
export declare class FormSubmitExtensionEvent<V> extends ExtensionEvent {
    targetValue: V;
    constructor(value: V, event: Event);
}
export type OverlayComponentProps = {
    overlay?: ReactNode;
};
export type HrefOptions = {
    url: string;
    external?: boolean;
};
export type HrefProp = string | HrefOptions;
export interface TShirtSizes {
    xs: 'extra-small' | 'xs';
    sm: 'small' | 'sm';
    md: 'medium' | 'md';
    lg: 'large' | 'lg';
    xl: 'extra-large' | 'xl';
}
export type AllSizes = TShirtSizes['xs'] | TShirtSizes['sm'] | TShirtSizes['md'] | TShirtSizes['lg'] | TShirtSizes['xl'];
export type AllDistances = 'flush' | AllSizes;
export declare const iconNames: {
    readonly success: "success";
    readonly remove: "remove";
    readonly add: "add";
    readonly attach: "attach";
    readonly date: "date";
    readonly copy: "duplicate";
    readonly delete: "delete";
    readonly edit: "edit";
    readonly email: "email";
    readonly exclamation: "exclamation";
    readonly question: "question";
    readonly home: "home";
    readonly location: "location";
    readonly upCarat: "upCarat";
    readonly downCarat: "downCarat";
    readonly warning: "warning";
    readonly shoppingCart: "cart";
    readonly clock: "time";
    readonly comment: "comments";
    readonly contact: "contacts";
    readonly star: "favorite";
    readonly file: "file";
    readonly reports: "reports";
    readonly video: "video";
    readonly robot: "simpleBot";
    readonly refresh: "refresh";
    readonly faceHappy: "emoji";
    readonly faceNeutral: "emojiLineNeutral";
    readonly faceSad: "emojiLineSad";
    readonly upload: "upload";
    readonly download: "download";
    readonly left: "left";
    readonly right: "right";
    readonly dataSync: "dataSync";
    readonly imageGallery: "imageGallery";
    readonly search: "search";
    readonly save: "saveEditableView";
    readonly notification: "notification";
    readonly bulb: "bulb";
    readonly settings: "settings";
    readonly filter: "filter";
    readonly gauge: "gauge";
    readonly enroll: "enroll";
    readonly generateChart: "generateChart";
    readonly gift: "gift";
    readonly flame: "highlyEngagedLead";
    readonly inbox: "inbox";
    readonly image: "insertImage";
    readonly quote: "insertQuote";
    readonly insertVideo: "insertVideo";
    readonly invoice: "invoice";
    readonly key: "key";
    readonly book: "knowledgeBase";
    readonly globe: "language";
    readonly lesson: "lesson";
    readonly link: "link";
    readonly listView: "listView";
    readonly locked: "locked";
    readonly mention: "mention";
    readonly messages: "messages";
    readonly mobile: "mobile";
    readonly notificationOff: "notificationOff";
    readonly hash: "numericDataType";
    readonly objectAssociations: "objectAssociations";
    readonly objectAssociationsManyToMany: "objectAssociationsManyToMany";
    readonly objectAssociationsManyToOne: "objectAssociationsManyToOne";
    readonly office365: "office365";
    readonly order: "order";
    readonly paymentSubscriptions: "paymentSubscriptions";
    readonly product: "product";
    readonly powerPointFile: "powerPointFile";
    readonly presentation: "presentation";
    readonly publish: "publish";
    readonly questionAnswer: "questionAnswer";
    readonly quickbooks: "quickbooks";
    readonly readMore: "readMore";
    readonly realEstateListing: "realEstateListing";
    readonly readOnlyView: "readOnlyView";
    readonly recentlySelected: "recentlySelected";
    readonly record: "record";
    readonly redo: "redo";
    readonly undo: "undo";
    readonly registration: "registration";
    readonly replace: "replace";
    readonly rotate: "rotate";
    readonly salesQuote: "salesQuote";
    readonly salesTemplates: "salesTemplates";
    readonly sequences: "sequences";
    readonly spellCheck: "spellCheck";
    readonly strike: "strike";
    readonly tablet: "tablet";
    readonly tag: "tag";
    readonly tasks: "tasks";
    readonly test: "test";
    readonly ticket: "ticket";
    readonly thumbsUp: "thumbsUp";
    readonly thumbsDown: "thumbsDown";
    readonly translate: "translate";
    readonly trophy: "trophy";
    readonly videoFile: "videoFile";
    readonly videoPlayerSubtitles: "videoPlayerSubtitles";
    readonly view: "view";
    readonly viewDetails: "viewDetails";
    readonly website: "website";
    readonly workflows: "workflows";
    readonly zoomIn: "zoomIn";
    readonly zoomOut: "zoomOut";
    readonly goal: "goal";
    readonly campaigns: "campaigns";
    readonly cap: "cap";
    readonly block: "block";
    readonly bank: "bank";
    readonly approvals: "approvals";
    readonly appointment: "appointment";
    readonly facebook: "socialBlockFacebook";
    readonly googlePlus: "socialBlockGoogleplus";
    readonly instagram: "socialBlockInstagram";
    readonly linkedin: "socialBlockLinkedin";
    readonly pinterest: "socialBlockPinterest";
    readonly rss: "socialBlockRss";
    readonly twitter: "socialBlockTwitter";
    readonly x: "socialBlockX";
    readonly xing: "socialBlockXing";
    readonly youtube: "socialBlockYoutube";
    readonly youtubePlay: "socialBlockYoutubeplay";
    readonly sortAlpAsc: "sortAlpAsc";
    readonly sortAlpDesc: "sortAlpDesc";
    readonly sortAmtAsc: "sortAmtAsc";
    readonly sortAmtDesc: "sortAmtDesc";
    readonly sortNumAsc: "sortNumAsc";
    readonly sortNumDesc: "sortNumDesc";
    readonly sortTableAsc: "sortTableAsc";
    readonly sortTableDesc: "sortTableDesc";
    readonly text: "text";
    readonly textColor: "textColor";
    readonly textDataType: "textDataType";
    readonly textSnippet: "textSnippet";
    readonly calling: "calling";
    readonly callingHangup: "callingHangup";
    readonly callingMade: "callingMade";
    readonly callingMissed: "callingMissed";
    readonly callingVoicemail: "callingVoicemail";
    readonly faceHappyFilled: "emojiFillHappy";
    readonly faceNeutralFilled: "emojiFillNeutral";
    readonly faceSadFilled: "emojiFillSad";
};
export type IconNames = keyof typeof iconNames;
export type TypesOfReadOnlyArray<T extends ReadonlyArray<unknown>> = T extends ReadonlyArray<infer ElementType> ? ElementType : never;
/** @deprecated use ExtensionEvent/FormSubmitExtensionEvent instead */
export declare class RemoteEvent<V> {
    type: string;
    bubbles: boolean;
    timeStamp: number;
    targetValue: V;
    constructor(value: V, event: Event);
}
