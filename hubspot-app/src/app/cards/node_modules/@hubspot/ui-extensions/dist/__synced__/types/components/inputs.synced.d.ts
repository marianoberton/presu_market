/**
 * Generic collection of props for all inputs
 * @internal
 * */
interface BaseInputProps<T = string, V = string> {
    /**
     * The label text to display for the form input element.
     */
    label: string;
    /**
     * The unique identifier for the input element, this could be thought of as the HTML5 [Input element's name attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name).
     */
    name: string;
    /**
     * The value of the input.
     */
    value?: T;
    /**
     * Determines if the required indicator should be displayed.
     *
     * @defaultValue `false`
     */
    required?: boolean;
    /**
     * Determines if the field is editable or not.
     *
     * @defaultValue `false`
     */
    readOnly?: boolean;
    /**
     * Instructional message to display to the user to help understand the purpose of the input.
     */
    description?: string;
    /**
     * Text that will appear in a tooltip next to the input label.
     */
    tooltip?: string;
    /**
     * Text that appears in the input when it has no value set.
     */
    placeholder?: string;
    /**
     * If set to `true`, `validationMessage` is displayed as an error message, if it was provided. The input will also render its error state to let the user know there is an error. If set to `false`, `validationMessage` is displayed as a success message.
     *
     * @defaultValue `false`
     */
    error?: boolean;
    /**
     * The value of the input on the first render.
     */
    defaultValue?: T;
    /**
     * The text to show under the input for error or success validations.
     */
    validationMessage?: string;
    /**
     * A callback function that is invoked when the value is committed. Currently these times are `onBlur` of the input and when the user submits the form.
     *
     * @event
     */
    onChange?: (value: V) => void;
    /**
     * A function that is called and passed the value every time the field is edited by the user. It is recommended that you do not use this value to update state, that is what `onChange` should be used for. Instead this should be used for validation.
     *
     * @event
     */
    onInput?: (value: V) => void;
    /**
     * A function that is called and passed the value every time the field loses focus.
     *
     * @event
     */
    onBlur?: (value: V) => void;
    /**
     * A function that is called and passed the value every time the field gets focused.
     *
     * @event
     */
    onFocus?: (value: V) => void;
}
/**
 * The props type for {@link !components.Input}.
 *
 * @category Component Props
 */
export interface InputProps extends BaseInputProps {
    /**
     * Sets the type of input to render.
     *
     * @defaultValue `"text"`
     */
    type?: 'text' | 'password';
}
/**
 * The props type for {@link !components.TextArea}.
 *
 * @category Component Props
 */
export interface TextAreaProps extends BaseInputProps {
    /**
     * The visible width of the text field in average character widths.
     */
    cols?: number;
    /**
     * The maximum number of characters (UTF-16 code units) that the user can enter. If not specified, the max length is unlimited.
     */
    maxLength?: number;
    /**
     * The number of visible text lines for the text field.
     */
    rows?: number;
    /**
     * Sets whether the element is resizable, and if so in which directions.
     *
     * @defaultValue `"both"`
     */
    resize?: 'vertical' | 'horizontal' | 'both' | 'none';
}
/**
 * Textarea was changed to TextArea. Exporting both for backwards compat
 *
 * @ignore
 * @internal
 * */
export type TextareaProps = TextAreaProps;
/**
 * @internal
 * @ignore
 * */
type BaseInputForNumber = Omit<BaseInputProps<number, number>, 'onInput'>;
/**
 * The props type for {@link !components.NumberInput}.
 *
 * @category Component Props
 */
export interface NumberInputProps extends BaseInputForNumber {
    /**
     * Sets the lower bound of the input.
     *
     */
    min?: number;
    /**
     * Sets the upper bound of the input.
     *
     */
    max?: number;
    /**
     * Sets the number of digits to the right of the decimal point.
     *
     */
    precision?: number;
    /**
     * Formats the input as a decimal point (decimal) or percentage (percentage).
     *
     * @defaultValue `"decimal"`
     */
    formatStyle?: 'decimal' | 'percentage';
    /** @deprecated use onChange instead. It doesn't guarantee valid format */
    onInput?: (value: number) => void;
}
/**
 * The props type for {@link !components.CurrencyInput}.
 *
 * @category Component Props
 */
export interface CurrencyInputProps extends BaseInputForNumber {
    /**
     * ISO 4217 currency code (e.g., "USD", "EUR", "JPY")
     * @defaultValue "USD"
     */
    currency?: string;
    /**
     * Sets the number of decimal places for the currency
     * If not provided, defaults to currency-specific precision
     */
    precision?: number;
    /**
     * Sets the lower bound of the input
     */
    min?: number;
    /**
     * Sets the upper bound of the input
     */
    max?: number;
}
/**
 * The props type for {@link !components.StepperInput}.
 *
 * @category Component Props
 */
export interface StepperInputProps extends Omit<NumberInputProps, 'onInput'> {
    /** The amount that the current value will increase or decrease on each step button click.
     * @defaultValue `1`
     */
    stepSize?: number;
    /**
     * Text that will appear in a tooltip next to the step up button when users
     * can't increase the current value.
     */
    maxValueReachedTooltip?: string;
    /**
     * Text that will appear in a tooltip next to the step down button when users
     * can't decrease the current value.
     */
    minValueReachedTooltip?: string;
}
/** Object that represents dates. */
export interface BaseDate {
    /** the four-digit year (e.g., 2023). */
    year: number;
    /** starting at 0, the number of the month (e.g., 0 = January, 11 = December). */
    month: number;
    /** the number of the day (e.g., 1 = the first day of the month).*/
    date: number;
}
/** The values used to invoke events on the DateInput component */
export interface DateInputEventsPayload extends BaseDate {
    /** Selected date with formatting option applied. (e.g., 09/04/1986). */
    formattedDate?: string;
}
/**
 * @internal
 * @ignore
 * */
type BaseDateInputForDate = Omit<BaseInputProps<BaseDate | null, DateInputEventsPayload>, 'onInput' | 'placeholder'>;
/**
 * The props type for {@link !components.DateInput}.
 *
 * @category Component Props
 */
export interface DateInputProps extends BaseDateInputForDate {
    /**
     * Sets the earliest date that will be valid.
     */
    min?: BaseDate;
    /**
     * Sets the latest date that will be valid.
     */
    max?: BaseDate;
    /**
     * Sets the message that users will see when they hover over dates before the min date.
     *
     * @defaultValue `"You must choose a newer date"`
     */
    minValidationMessage?: string;
    /**
     * Sets the message that users will see when the hover over dates after the max date.
     *
     * @defaultValue `"You must choose an older date"`
     */
    maxValidationMessage?: string;
    /**
     * Sets the date format that input will display to users.
     *
     * @defaultValue `short`
     *
     * #### Format Options
     *
     * - short: `09/04/1986`
     * - long: `September 4, 1986`
     * - medium : `Sep 4, 1986`
     * - standard: `1986-09-04`
     * - L: `09/04/1986`
     * - LL: `September 4, 1986`
     * - ll : `Sep 4, 1986`
     * - YYYY-MM-DD: `1986-09-04`
     */
    format?: 'YYYY-MM-DD' | 'L' | 'LL' | 'll' | 'short' | 'long' | 'medium' | 'standard';
    /**
     * Sets the timezone that the component will use to calculate valid dates.
     *
     * @defaultValue `"userTz"`
     */
    timezone?: 'userTz' | 'portalTz';
    /**
     * Sets the label of the clear button.
     *
     * @defaultValue `"Clear"`
     */
    clearButtonLabel?: string;
    /**
     * Sets the label of the today button.
     *
     * @defaultValue `"Today"`
     */
    todayButtonLabel?: string;
}
/**
 * Object that represents times.
 */
export interface BaseTime {
    /** The hour for the time (0 to 23) in 24-hour format (e.g. 0 = 12:00 AM, 9 = 9:00 AM, 15 = 3:00 PM). */
    hours: number;
    /** The minutes for the time (0 to 59). */
    minutes: number;
}
/**
 * @ignore
 *
 * The values used to invoke events on the TimeInput component
 */
export interface TimeInputEventsPayload extends BaseTime {
}
/**
 * @internal
 * @ignore
 * */
type BaseTimeInputForTime = Omit<BaseInputProps<BaseTime | null, TimeInputEventsPayload>, 'onInput' | 'placeholder' | 'onChange'>;
/**
 * The props type for {@link !components.TimeInput}.
 *
 * @category Component Props
 */
export interface TimeInputProps extends BaseTimeInputForTime {
    /**
     * A callback function that is invoked when the value is changed.
     *
     * @event
     */
    onChange?: (value: TimeInputEventsPayload) => void;
    /**
     * Sets the earliest time that will be valid.
     */
    min?: BaseTime;
    /**
     * Sets the latest time that will be valid.
     */
    max?: BaseTime;
    /**
     * Sets the interval (in minutes) between the dropdown options.
     *
     *  @defaultValue `30`
     */
    interval?: number;
    /**
     * Sets the timezone that the component will display alongside times in the TimeInput. This will not modify the available valid inputs.
     *
     */
    timezone?: 'userTz' | 'portalTz';
}
/**
 * The props type for {@link !components.SearchInput}.
 *
 * @category Component Props
 */
export interface SearchInputProps extends BaseInputProps {
    /** Shows a clear button to clear the input. Default is true. */
    clearable?: boolean;
}
export {};
