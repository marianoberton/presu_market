import { RenderedNodeType } from '../types';
import { EMPTY_CHILDREN } from './constants';
import { debugLog } from './debug';
import { InvalidEventFunctionError, MissingEventFunctionError } from './errors';
import { printNode } from './print';
import { find, findAll, findAllChildren, findChild, maybeFind, maybeFindChild, } from './query';
/**
 * Creates a rendered element node.
 *
 * @param document The document that the element belongs to.
 * @param name The name of the element.
 * @param props The props of the element.
 * @returns A rendered element node.
 */
export const createElementNode = (document, name, props) => {
    const elementNode = {
        nodeType: RenderedNodeType.Element,
        name,
        props,
        text: null,
        children: EMPTY_CHILDREN,
        document,
        debugLog: (label) => {
            debugLog(elementNode, label);
        },
        find: (targetComponent, matcher) => {
            return find(elementNode, targetComponent, matcher);
        },
        findAll: (targetComponent, matcher) => {
            return findAll(elementNode, targetComponent, matcher);
        },
        findChild: (targetComponent, matcher) => {
            return findChild(elementNode, targetComponent, matcher);
        },
        findAllChildren: (targetComponent, matcher) => {
            return findAllChildren(elementNode, targetComponent, matcher);
        },
        maybeFind: (targetComponent, matcher) => {
            return maybeFind(elementNode, targetComponent, matcher);
        },
        maybeFindChild: (targetComponent, matcher) => {
            return maybeFindChild(elementNode, targetComponent, matcher);
        },
        toString: () => {
            return printNode(elementNode);
        },
        trigger: (eventPropName, eventArg) => {
            const eventFunction = elementNode.props[eventPropName];
            if (!eventFunction) {
                throw new MissingEventFunctionError({
                    componentName: name,
                    eventPropName,
                });
            }
            if (typeof eventFunction !== 'function') {
                throw new InvalidEventFunctionError({
                    componentName: name,
                    eventPropName,
                });
            }
            document.batchUpdate(() => {
                eventFunction(eventArg);
            });
        },
    };
    return elementNode;
};
