/**
 * Generic collection of props for select components
 * @internal
 * */
export interface BaseSelectProps {
    /**
     * The text that displays above to the dropdown menu.
     *
     */
    label?: string;
    /**
     * The unique identifier for the select element.
     *
     */
    name?: string;
    /**
     * When set to `true`, displays a required field indicator.
     *
     * @defaultValue `false`
     */
    required?: boolean;
    /**
     * When set to `true`, sets the field as read-only on the CRM record, and users will not be able to fill the input field.
     *
     * @defaultValue `false`
     */
    readOnly?: boolean;
    /**
     * Displayed text that describes the field's purpose.
     *
     */
    description?: string;
    /**
     * The text that displays in a tooltip next to the label.
     *
     */
    tooltip?: string;
    /**
     * Text that appears in the input when no value is set.
     *
     */
    placeholder?: string;
    /**
     * When set to `true`, `validationMessage` is displayed as an error message if provided.
     * The input will also render its error state to let the user know there's an error.
     * If left `false` (default), `validationMessage` is displayed as a success message.
     *
     * @defaultValue `false`
     */
    error?: boolean;
    /**
     * The text to show if the input has an error.
     *
     */
    validationMessage?: string;
    /**
     * The variant type for the select.
     *
     * @defaultValue `"input"`
     */
    variant?: 'transparent' | 'input';
}
/**
 * The props type for {@link !components.Select}.
 *
 * @category Component Props
 */
export interface SelectProps extends BaseSelectProps {
    /**
     * The value of the select input.
     *
     */
    value?: string | number | boolean;
    /**
     * A callback function that is invoked when the value is committed.
     *
     * @event
     */
    onChange?: (value: NonNullable<SelectProps['value']>) => void;
    /**
     * The variant type for the select.
     *
     * @defaultValue `"input"`
     */
    variant?: 'transparent' | 'input';
    /**
     * A function that is called and passed the value every time the search field is
     * edited by the user. Prefer updating state in onChange as it fires less
     * frequently, and if you need to update state here, consider debouncing your function.
     *
     * @event
     */
    onInput?: (value: string) => void;
    /**
     * The options to display in the dropdown menu.
     */
    options: {
        /** Will be used as the display text. **/
        label: string;
        /** Should be the option's unique identifier, which is submitted with the form. **/
        value: string | number | boolean;
    }[];
}
/**
 * The props type for {@link !components.MultiSelect}.
 *
 * @category Component Props
 */
export interface MultiSelectProps extends BaseSelectProps {
    /**
     * The value of the select input.
     *
     */
    value?: (string | number | boolean)[];
    /**
     * A callback function that is invoked when the value is committed.
     *
     * @event
     */
    onChange?: (value: NonNullable<MultiSelectProps['value']>) => void;
    /**
     * The options to display in the dropdown menu.
     */
    options: {
        /** Will be used as the display text. **/
        label: string;
        /** Should be the option's unique identifier, which is submitted with the form. **/
        value: string | number | boolean;
    }[];
}
