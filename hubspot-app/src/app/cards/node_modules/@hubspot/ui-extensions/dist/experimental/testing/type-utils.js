import { RenderedNodeType, } from './types';
/**
 * Type guard to check if a node is a rendered element node.
 *
 * @param node The node to check.
 * @returns `true` if the node is a rendered element node.
 */
export const isRenderedElementNode = (node) => {
    return node?.nodeType === RenderedNodeType.Element;
};
/**
 * Type guard to check if a node is a rendered text node.
 *
 * @param node The node to check.
 * @returns `true` if the node is a rendered text node.
 */
export const isRenderedTextNode = (node) => {
    return node?.nodeType === RenderedNodeType.Text;
};
/**
 * Type guard to check if a node is a rendered root node.
 *
 * @param node The node to check.
 * @returns `true` if the node is a rendered root node.
 */
export const isRenderedRootNode = (node) => {
    return node?.nodeType === RenderedNodeType.Root;
};
/**
 * Type guard to check if a node is a rendered fragment node.
 *
 * @param node The node to check.
 * @returns `true` if the node is a rendered fragment node.
 */
export const isRenderedFragmentNode = (node) => {
    return node?.nodeType === RenderedNodeType.Fragment;
};
