import { ReactNode } from 'react';
export interface AlignmentProps {
    align?: 'left' | 'center' | 'right';
}
export interface WidthProps {
    width?: 'min' | 'max' | 'auto' | number;
}
export interface TableElementProps {
    children: ReactNode;
}
/**
 * @property align Sets the alignment of a table header.
 * @property width Sets the width of a table header.
 *
 * @interface
 */
export type BaseTableHeaderProps = TableElementProps & AlignmentProps & WidthProps;
export type TableCellProps = TableElementProps & AlignmentProps & WidthProps & {
    colSpan?: number;
};
/**
 * The props type for {@link !components.TableHeader} when sorted === never.
 *
 * @category Component Props
 */
export interface UnSortedTableHeaderProps extends BaseTableHeaderProps {
    sortDirection?: 'never';
}
/**
 * The props type for {@link !components.TableHeader} when sorted !== never.
 *
 * @category Component Props
 */
export interface SortedTableHeaderProps extends BaseTableHeaderProps {
    /**
     * Sets the current direction in which the column is sorted (if any). It's a visual indicator, it doesn't modify the data.
     *
     * @defaultValue `"none"`
     */
    sortDirection: 'ascending' | 'descending' | 'none';
    /**
     * A callback function that is invoked when the header is clicked. It recieves the new `sortDirection` as an argument.
     * It's required when sort = `ascending`, `descending` or `none`.
     *
     * @event
     * @defaultValue `"none"`
     */
    onSortChange: (value: NonNullable<SortedTableHeaderProps['sortDirection']>) => void;
    /**
     * If `true`, users cannot change the sort ordering. It has no effect if sort=`never` or `undefined`.
     *
     *  @defaultValue `false`
     */
    disabled?: boolean;
}
/**
 * The props type for {@link !components.TableHeader}.
 *
 * @category Component Props
 */
export type TableHeaderProps = SortedTableHeaderProps | UnSortedTableHeaderProps;
interface BaseTableProps {
    /**
     * When set to false, the table will not have borders.
     *
     * @defaultValue `true`
     */
    bordered?: boolean;
    /**
     * When set to `true`, the table will not have bottom margin.
     *
     * @defaultValue `false`
     */
    flush?: boolean;
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components. The children should be one of Table's subcomponents.
     */
    children: ReactNode;
}
/**
 * @internal
 */
export interface TableNoPaginatedProps extends BaseTableProps {
    /**
     * When set to `true`, the table will include pagination navigation. Take a look at {@link !types.TablePaginatedProps} for pagination props.
     *
     * @defaultValue `false`
     */
    paginated?: false;
}
/**
 * @internal
 */
export interface TablePaginatedProps extends BaseTableProps {
    /**
     * When set to `true`, the table will include pagination navigation. Take a look at {@link !types.TablePaginatedProps} for pagination props.
     *
     * @defaultValue `false`
     */
    paginated: true;
    /**
     * The total number of pages available.
     */
    pageCount: number;
    /**
     * When set to `false`, hides the text labels for the First/Prev/Next buttons. The button labels will still be accessible to screen readers.
     *
     * @defaultValue `true`
     */
    showButtonLabels?: boolean;
    /**
     * When set to `true`, displays the **First/Last** page buttons.
     *
     * @defaultValue `false`
     */
    showFirstLastButtons?: boolean;
    /**
     * Sets how many page buttons are displayed.
     */
    maxVisiblePageButtons?: number;
    /**
     * Denotes the current page.
     */
    page?: number;
    /**
     * A function that will be invoked when the pagination button is clicked. It receives the new page number as argument.
     *
     * @event
     */
    onPageChange: (pageNumber: number) => void;
}
/**
 * The props type for {@link !components.Table}.
 *
 * @category Component Props
 */
export type TableProps = TableNoPaginatedProps | TablePaginatedProps;
export {};
