import { ReactNode } from 'react';
/**
 * @internal
 * Format options for text component.
 */
export interface TextFormatOptions {
    /**
     * Weight of the font.
     *
     * @defaultValue `"regular"`
     */
    fontWeight?: 'regular' | 'bold' | 'demibold';
    /**
     * If `true`, font will be in italicized.
     *
     * @defaultValue `false`
     */
    italic?: boolean;
    /**
     * Line decoration of the font.
     *
     * @defaultValue `"none"`
     */
    lineDecoration?: 'none' | 'underline' | 'strikethrough';
    /**
     * Controls the capitalization of text.
     *
     * - `none`: No capitalization changes (default)
     * - `uppercase`: Transforms all characters to uppercase
     * - `lowercase`: Transforms all characters to lowercase
     * - `capitalize`: Capitalizes the first letter of each word
     * - `sentenceCase`: Capitalizes the first letter of the text and makes the rest lowercase
     *
     * @defaultValue `"none"`
     */
    textTransform?: 'none' | 'uppercase' | 'lowercase' | 'capitalize' | 'sentenceCase';
}
export interface TruncateOptions {
    maxWidth?: number;
    tooltipText?: string;
}
/**
 * The props type for {@link !components.Text}.
 *
 * @interface
 * @category Component Props
 */
export type TextProps = {
    /**
     * The style of text to display. Can be either of:
     *
     * - bodytext: the default value which renders the standard text size.
     * - microcopy: smaller text used for adding context.
     *
     * @defaultValue `"bodytext"`
     */
    variant?: 'bodytext' | 'microcopy';
    /**
     * When set to `true`, inserts a line break.
     *
     * @defaultValue `false`
     */
    inline?: boolean;
    /**
     * Sets the content that will render inside the component. This prop is passed implicitly by providing sub-components.
     */
    children: ReactNode;
    /**
     * @interface
     * The style of text to display. Can be any of:
     *
     * - { fontWeight: 'bold' }
     * - { fontWeight: 'demibold' }
     * - { italic: true }
     * - { lineDecoration: 'strikethrough' }
     * - { lineDecoration: 'underline' }
     * - <Text inline={true}>
     */
    format?: TextFormatOptions;
    /**
     * @interface
     * truncates long strings to a single line. If the full string doesn't fit in one line,
     * it's shown in a tooltip on hover.
     *
     * - `false` => no truncation(default).
     * - `true` => truncates the string to a single line. Full-text will show inside the tooltip.
     * - { tooltipText: 'some text' } => truncates the string and lets you control the contents of the tooltip.
     * - { maxWidth: 150 } => sets the width(in pixel) of the line.
     *
     * @defaultValue `false`
     */
    truncate?: boolean | TruncateOptions;
};
